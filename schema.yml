openapi: 3.0.3
info:
  title: Team management API
  version: 1.0.0
  description: API for manage your team, create projects and tasks.
paths:
  /projects/:
    get:
      operationId: projects_list
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
          description: ''
    post:
      operationId: projects_create
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /projects/{project_id}/:
    get:
      operationId: projects_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: projects_update
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: projects_partial_update
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProject'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: projects_destroy
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /projects/{project_id}/tasks/:
    get:
      operationId: projects_tasks_list
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          description: ''
    post:
      operationId: projects_tasks_create
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /projects/{project_id}/tasks/{task_id}/:
    get:
      operationId: projects_tasks_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: projects_tasks_update
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: projects_tasks_partial_update
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTask'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: projects_tasks_destroy
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /teams/:
    get:
      operationId: teams_list
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teams'
          description: ''
    post:
      operationId: teams_create
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teams'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Teams'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Teams'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
          description: ''
  /teams/{team_id}/:
    get:
      operationId: teams_retrieve
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
          description: ''
    put:
      operationId: teams_update
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teams'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Teams'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Teams'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
          description: ''
    patch:
      operationId: teams_partial_update
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeams'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTeams'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeams'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
          description: ''
    delete:
      operationId: teams_destroy
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /teams/{team_id}/members/:
    get:
      operationId: teams_members_list
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMembership'
          description: ''
    post:
      operationId: teams_members_create
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMembership'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamMembership'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamMembership'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMembership'
          description: ''
  /teams/{team_id}/members/{user_id}/:
    get:
      operationId: teams_members_retrieve
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: teams_members_update
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: teams_members_partial_update
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: teams_members_destroy
      parameters:
      - in: path
        name: team_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - teams
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/:
    get:
      operationId: users_list
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/refresh/:
    post:
      operationId: users_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/register/:
    post:
      operationId: users_register_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /users/token/:
    post:
      operationId: users_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
components:
  schemas:
    ExperienceEnum:
      enum:
      - trainee
      - jun
      - mid
      - sen
      - lead
      type: string
      description: |-
        * `trainee` - Trainee
        * `jun` - Junior
        * `mid` - Middle
        * `sen` - Senior
        * `lead` - Team Lead
    PatchedProject:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 75
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deadline:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatusEnum'
        team:
          type: integer
          writeOnly: true
        team_info:
          allOf:
          - $ref: '#/components/schemas/Teams'
          readOnly: true
    PatchedTask:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 75
        content:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        deadline:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        project:
          type: integer
          writeOnly: true
        project_info:
          allOf:
          - $ref: '#/components/schemas/Project'
          readOnly: true
    PatchedTeams:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        leader:
          type: integer
          writeOnly: true
        leader_info:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        full_name:
          type: string
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
    Project:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 75
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deadline:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatusEnum'
        team:
          type: integer
          writeOnly: true
        team_info:
          allOf:
          - $ref: '#/components/schemas/Teams'
          readOnly: true
      required:
      - created_at
      - id
      - name
      - team
      - team_info
      - updated_at
    ProjectStatusEnum:
      enum:
      - plan
      - dev
      - test
      - review
      - done
      type: string
      description: |-
        * `plan` - Planning
        * `dev` - Development
        * `test` - Testing
        * `review` - Review
        * `done` - Done
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        password:
          type: string
          writeOnly: true
      required:
      - email
      - first_name
      - last_name
      - password
    Task:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 75
        content:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        deadline:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        project:
          type: integer
          writeOnly: true
        project_info:
          allOf:
          - $ref: '#/components/schemas/Project'
          readOnly: true
      required:
      - created_at
      - id
      - name
      - project
      - project_info
    TaskStatusEnum:
      enum:
      - todo
      - progress
      - done
      type: string
      description: |-
        * `todo` - To Do
        * `progress` - In Progress
        * `done` - Done
    TeamMembership:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        join_date:
          type: string
          format: date
          readOnly: true
        experience:
          $ref: '#/components/schemas/ExperienceEnum'
        position:
          type: string
          readOnly: true
        member:
          type: integer
          writeOnly: true
        member_info:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        team:
          type: integer
          writeOnly: true
        team_name:
          type: string
          readOnly: true
      required:
      - id
      - join_date
      - member
      - member_info
      - position
      - team
      - team_name
    Teams:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        leader:
          type: integer
          writeOnly: true
        leader_info:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - created_at
      - id
      - leader
      - leader_info
      - name
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        full_name:
          type: string
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - email
      - full_name
      - id
      - password
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
